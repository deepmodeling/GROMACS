# Mix-in job definitions.

# Centralized definitions of common job parameter values.

.variables:default:
  variables:
    KUBERNETES_CPU_LIMIT: 8
    KUBERNETES_CPU_REQUEST: 4
    KUBERNETES_MEMORY_LIMIT: 8Gi
    KUBERNETES_EXTENDED_RESOURCE_NAME: ""
    KUBERNETES_EXTENDED_RESOURCE_LIMIT: 0
    CACHE_FALLBACK_KEY: "$CI_JOB_NAME-$CI_JOB_STAGE-release-2020"
    BUILD_DIR: build
    INSTALL_DIR: install
    CMAKE_GMXAPI_OPTIONS: "-DGMX_PYTHON_PACKAGE=OFF"
# TODO: Get these from updated Docker images.

# Our generic before_script to install dependencies and prepare the ccache directory.
.before_script:default:
  before_script:
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache

# Jobs that run for new commits and pipelines triggered by schedules or
# through the web interface, unless GROMACS_RELEASE is set. Excluded from
# extra pipelines generated by merge request events.
# Includes non-gromacs projects. Note that jobs using this rule are
# eligible to run on non-gromacs project infrastructure, and should therefore
# override the default *tag* parameter to exclude tags specific to the GROMACS
# GitLab Runner infrastructure. I.e. in the job definition, set `tags: []`
.rules:basic-push:
  rules:
    - if: '$GROMACS_RELEASE'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never

# Jobs that run for merge requests and schedules, but not when GROMACS_RELEASE
# is set. Excludes non-gromacs projects.
.rules:merge-requests:
  rules:
    - if: '$CI_PROJECT_NAMESPACE != "gromacs"'
      when: never
    - if: '$GROMACS_RELEASE'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "push"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always

# Rule to run a job only in nightly release-preparation pipelines.
# Checks if the GROMACS_RELEASE variable was set (typically through the GitLab web interface).
# Excludes merge_requests and non-gromacs projects.
# TODO: Update to *rules* syntax.
.rules:nightly-only-for-release:
  rules:
    - if: '$CI_PROJECT_NAMESPACE != "gromacs"'
      when: never
    - if: '$GROMACS_RELEASE && $CI_PIPELINE_SOURCE == "web"'
      when: always
    - if: '$GROMACS_RELEASE && $CI_PIPELINE_SOURCE == "schedule"'
      when: always

# Jobs that run on schedules, but not for merge requests or when GROMACS_RELEASE
# is set. Excludes non-gromacs projects.
.rules:nightly-not-for-release:
  rules:
    - if: '$CI_PROJECT_NAMESPACE != "gromacs"'
      when: never
    - if: '$GROMACS_RELEASE'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "web" || $CI_PIPELINE_SOURCE == "schedule"'
      when: always

# Behavioral templates

# Use a persistent compiler cache to speed up rebuilds for a single job.
.use-ccache:
  cache:
    key: "$CI_JOB_NAME-$CI_JOB_STAGE-$CI_COMMIT_REF_SLUG"
    paths:
      - ccache/

# Tool chains

.use-cuda:
  variables:
    CMAKE_PRECISION_OPTIONS: "-DGMX_DOUBLE=OFF"
    CMAKE_GPU_OPTIONS: -DGMX_GPU=ON -DGMX_USE_CUDA=ON

.use-mpi:
  variables:
    CMAKE_MPI_OPTIONS: "-DGMX_MPI=ON"

.use-opencl:
  variables:
    CMAKE_PRECISION_OPTIONS: "-DGMX_DOUBLE=OFF"
    CMAKE_GPU_OPTIONS: -DGMX_GPU=ON -DGMX_USE_OPENCL=ON

# Base definition for using gcc.
.use-gcc:base:
  variables:
    CMAKE_COMPILER_SCRIPT: -DCMAKE_C_COMPILER=gcc-$COMPILER_MAJOR_VERSION -DCMAKE_CXX_COMPILER=g++-$COMPILER_MAJOR_VERSION
  before_script:
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache

# Base definition for using clang.
.use-clang:base:
  variables:
    CMAKE_COMPILER_SCRIPT: -DCMAKE_C_COMPILER=clang-$COMPILER_MAJOR_VERSION -DCMAKE_CXX_COMPILER=clang++-$COMPILER_MAJOR_VERSION
  before_script:
    - mkdir -p ccache
    - export CCACHE_BASEDIR=${PWD}
    - export CCACHE_DIR=${PWD}/ccache
    - export ASAN_SYMBOLIZER_PATH=/usr/local/bin/llvm-symbolizer

